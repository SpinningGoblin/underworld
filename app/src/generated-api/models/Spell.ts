/* tslint:disable */
/* eslint-disable */
/**
 * Underworld
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Attack,
    AttackFromJSON,
    AttackFromJSONTyped,
    AttackToJSON,
} from './Attack';
import {
    Defense,
    DefenseFromJSON,
    DefenseFromJSONTyped,
    DefenseToJSON,
} from './Defense';
import {
    SpellName,
    SpellNameFromJSON,
    SpellNameFromJSONTyped,
    SpellNameToJSON,
} from './SpellName';
import {
    SpellType,
    SpellTypeFromJSON,
    SpellTypeFromJSONTyped,
    SpellTypeToJSON,
} from './SpellType';

/**
 * 
 * @export
 * @interface Spell
 */
export interface Spell {
    /**
     * 
     * @type {SpellName}
     * @memberof Spell
     */
    name: SpellName;
    /**
     * 
     * @type {Attack}
     * @memberof Spell
     */
    attack?: Attack;
    /**
     * 
     * @type {boolean}
     * @memberof Spell
     */
    knows_attack: boolean;
    /**
     * 
     * @type {Defense}
     * @memberof Spell
     */
    defense?: Defense;
    /**
     * 
     * @type {boolean}
     * @memberof Spell
     */
    knows_defense: boolean;
    /**
     * 
     * @type {number}
     * @memberof Spell
     */
    uses: number;
    /**
     * 
     * @type {boolean}
     * @memberof Spell
     */
    knows_uses: boolean;
    /**
     * 
     * @type {SpellType}
     * @memberof Spell
     */
    spell_type: SpellType;
}

export function SpellFromJSON(json: any): Spell {
    return SpellFromJSONTyped(json, false);
}

export function SpellFromJSONTyped(json: any, ignoreDiscriminator: boolean): Spell {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': SpellNameFromJSON(json['name']),
        'attack': !exists(json, 'attack') ? undefined : AttackFromJSON(json['attack']),
        'knows_attack': json['knows_attack'],
        'defense': !exists(json, 'defense') ? undefined : DefenseFromJSON(json['defense']),
        'knows_defense': json['knows_defense'],
        'uses': json['uses'],
        'knows_uses': json['knows_uses'],
        'spell_type': SpellTypeFromJSON(json['spell_type']),
    };
}

export function SpellToJSON(value?: Spell | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': SpellNameToJSON(value.name),
        'attack': AttackToJSON(value.attack),
        'knows_attack': value.knows_attack,
        'defense': DefenseToJSON(value.defense),
        'knows_defense': value.knows_defense,
        'uses': value.uses,
        'knows_uses': value.knows_uses,
        'spell_type': SpellTypeToJSON(value.spell_type),
    };
}

