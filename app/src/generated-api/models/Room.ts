/* tslint:disable */
/* eslint-disable */
/**
 * Underworld
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Dimensions,
    DimensionsFromJSON,
    DimensionsFromJSONTyped,
    DimensionsToJSON,
} from './Dimensions';
import {
    Exit,
    ExitFromJSON,
    ExitFromJSONTyped,
    ExitToJSON,
} from './Exit';
import {
    FixturePosition,
    FixturePositionFromJSON,
    FixturePositionFromJSONTyped,
    FixturePositionToJSON,
} from './FixturePosition';
import {
    FlavourText,
    FlavourTextFromJSON,
    FlavourTextFromJSONTyped,
    FlavourTextToJSON,
} from './FlavourText';
import {
    Identifier,
    IdentifierFromJSON,
    IdentifierFromJSONTyped,
    IdentifierToJSON,
} from './Identifier';
import {
    NpcPosition,
    NpcPositionFromJSON,
    NpcPositionFromJSONTyped,
    NpcPositionToJSON,
} from './NpcPosition';
import {
    RoomDescriptor,
    RoomDescriptorFromJSON,
    RoomDescriptorFromJSONTyped,
    RoomDescriptorToJSON,
} from './RoomDescriptor';
import {
    RoomType,
    RoomTypeFromJSON,
    RoomTypeFromJSONTyped,
    RoomTypeToJSON,
} from './RoomType';

/**
 * 
 * @export
 * @interface Room
 */
export interface Room {
    /**
     * 
     * @type {Identifier}
     * @memberof Room
     */
    identifier: Identifier;
    /**
     * 
     * @type {Array<RoomDescriptor>}
     * @memberof Room
     */
    descriptors: Array<RoomDescriptor>;
    /**
     * 
     * @type {RoomType}
     * @memberof Room
     */
    room_type: RoomType;
    /**
     * 
     * @type {Array<FixturePosition>}
     * @memberof Room
     */
    fixture_positions: Array<FixturePosition>;
    /**
     * 
     * @type {Dimensions}
     * @memberof Room
     */
    dimensions: Dimensions;
    /**
     * 
     * @type {Array<NpcPosition>}
     * @memberof Room
     */
    npc_positions: Array<NpcPosition>;
    /**
     * 
     * @type {FlavourText}
     * @memberof Room
     */
    flavour?: FlavourText;
    /**
     * 
     * @type {Array<Exit>}
     * @memberof Room
     */
    exits: Array<Exit>;
}

export function RoomFromJSON(json: any): Room {
    return RoomFromJSONTyped(json, false);
}

export function RoomFromJSONTyped(json: any, ignoreDiscriminator: boolean): Room {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'identifier': IdentifierFromJSON(json['identifier']),
        'descriptors': ((json['descriptors'] as Array<any>).map(RoomDescriptorFromJSON)),
        'room_type': RoomTypeFromJSON(json['room_type']),
        'fixture_positions': ((json['fixture_positions'] as Array<any>).map(FixturePositionFromJSON)),
        'dimensions': DimensionsFromJSON(json['dimensions']),
        'npc_positions': ((json['npc_positions'] as Array<any>).map(NpcPositionFromJSON)),
        'flavour': !exists(json, 'flavour') ? undefined : FlavourTextFromJSON(json['flavour']),
        'exits': ((json['exits'] as Array<any>).map(ExitFromJSON)),
    };
}

export function RoomToJSON(value?: Room | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'identifier': IdentifierToJSON(value.identifier),
        'descriptors': ((value.descriptors as Array<any>).map(RoomDescriptorToJSON)),
        'room_type': RoomTypeToJSON(value.room_type),
        'fixture_positions': ((value.fixture_positions as Array<any>).map(FixturePositionToJSON)),
        'dimensions': DimensionsToJSON(value.dimensions),
        'npc_positions': ((value.npc_positions as Array<any>).map(NpcPositionToJSON)),
        'flavour': FlavourTextToJSON(value.flavour),
        'exits': ((value.exits as Array<any>).map(ExitToJSON)),
    };
}

