/* tslint:disable */
/* eslint-disable */
/**
 * Underworld
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AttackNpc,
    AttackNpcFromJSON,
    AttackNpcToJSON,
    CastSpellOnNpc,
    CastSpellOnNpcFromJSON,
    CastSpellOnNpcToJSON,
    CastSpellOnPlayer,
    CastSpellOnPlayerFromJSON,
    CastSpellOnPlayerToJSON,
    ExitRoom,
    ExitRoomFromJSON,
    ExitRoomToJSON,
    Fixture,
    FixtureFromJSON,
    FixtureToJSON,
    FixtureInspected,
    FixtureInspectedFromJSON,
    FixtureInspectedToJSON,
    FixtureLooted,
    FixtureLootedFromJSON,
    FixtureLootedToJSON,
    FixtureOpened,
    FixtureOpenedFromJSON,
    FixtureOpenedToJSON,
    InspectFixture,
    InspectFixtureFromJSON,
    InspectFixtureToJSON,
    InspectNpc,
    InspectNpcFromJSON,
    InspectNpcToJSON,
    ItemMoved,
    ItemMovedFromJSON,
    ItemMovedToJSON,
    ItemSold,
    ItemSoldFromJSON,
    ItemSoldToJSON,
    ItemUsed,
    ItemUsedFromJSON,
    ItemUsedToJSON,
    LookAtFixture,
    LookAtFixtureFromJSON,
    LookAtFixtureToJSON,
    LookAtNpc,
    LookAtNpcFromJSON,
    LookAtNpcToJSON,
    LootFixture,
    LootFixtureFromJSON,
    LootFixtureToJSON,
    LootNpc,
    LootNpcFromJSON,
    LootNpcToJSON,
    MovePlayerItem,
    MovePlayerItemFromJSON,
    MovePlayerItemToJSON,
    NonPlayer,
    NonPlayerFromJSON,
    NonPlayerToJSON,
    NpcAttacked,
    NpcAttackedFromJSON,
    NpcAttackedToJSON,
    NpcInspected,
    NpcInspectedFromJSON,
    NpcInspectedToJSON,
    NpcLooted,
    NpcLootedFromJSON,
    NpcLootedToJSON,
    OpenFixture,
    OpenFixtureFromJSON,
    OpenFixtureToJSON,
    OpenFixtureHiddenCompartment,
    OpenFixtureHiddenCompartmentFromJSON,
    OpenFixtureHiddenCompartmentToJSON,
    PerformAction,
    PerformActionFromJSON,
    PerformActionToJSON,
    Room,
    RoomFromJSON,
    RoomToJSON,
    RoomExited,
    RoomExitedFromJSON,
    RoomExitedToJSON,
    SellPlayerItem,
    SellPlayerItemFromJSON,
    SellPlayerItemToJSON,
    SpellCast,
    SpellCastFromJSON,
    SpellCastToJSON,
    ThrowItemAtNpc,
    ThrowItemAtNpcFromJSON,
    ThrowItemAtNpcToJSON,
    UseItemOnPlayer,
    UseItemOnPlayerFromJSON,
    UseItemOnPlayerToJSON,
} from '../models';

export interface AttackNpcRequest {
    gameId: string;
    attackNpc: AttackNpc;
}

export interface CastSpellOnNpcRequest {
    gameId: string;
    castSpellOnNpc: CastSpellOnNpc;
}

export interface CastSpellOnPlayerRequest {
    gameId: string;
    castSpellOnPlayer: CastSpellOnPlayer;
}

export interface CurrentActionsRequest {
    gameId: string;
}

export interface ExitRoomRequest {
    gameId: string;
    exitRoom: ExitRoom;
}

export interface InspectFixtureRequest {
    gameId: string;
    inspectFixture: InspectFixture;
}

export interface InspectNpcRequest {
    gameId: string;
    inspectNpc: InspectNpc;
}

export interface LookAroundRoomRequest {
    gameId: string;
}

export interface LookAtFixtureRequest {
    gameId: string;
    lookAtFixture: LookAtFixture;
}

export interface LookAtNpcRequest {
    gameId: string;
    lookAtNpc: LookAtNpc;
}

export interface LootFixtureRequest {
    gameId: string;
    lootFixture: LootFixture;
}

export interface LootNpcRequest {
    gameId: string;
    lootNpc: LootNpc;
}

export interface MovePlayerItemRequest {
    gameId: string;
    movePlayerItem: MovePlayerItem;
}

export interface OpenFixtureRequest {
    gameId: string;
    openFixture: OpenFixture;
}

export interface OpenFixtureHiddenCompartmentRequest {
    gameId: string;
    openFixtureHiddenCompartment: OpenFixtureHiddenCompartment;
}

export interface SellPlayerItemRequest {
    gameId: string;
    sellPlayerItem: SellPlayerItem;
}

export interface ThrowItemAtNpcRequest {
    gameId: string;
    throwItemAtNpc: ThrowItemAtNpc;
}

export interface UseItemOnPlayerRequest {
    gameId: string;
    useItemOnPlayer: UseItemOnPlayer;
}

/**
 * GameActionsApi - interface
 * 
 * @export
 * @interface GameActionsApiInterface
 */
export interface GameActionsApiInterface {
    /**
     * 
     * @summary Attack a specific NPC inside the current room of the specified game.
     * @param {string} gameId 
     * @param {AttackNpc} attackNpc 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    attackNpcRaw(requestParameters: AttackNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NpcAttacked>>;

    /**
     * Attack a specific NPC inside the current room of the specified game.
     */
    attackNpc(requestParameters: AttackNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NpcAttacked>;

    /**
     * 
     * @summary Cast a spell on your player character.
     * @param {string} gameId 
     * @param {CastSpellOnNpc} castSpellOnNpc 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    castSpellOnNpcRaw(requestParameters: CastSpellOnNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SpellCast>>;

    /**
     * Cast a spell on your player character.
     */
    castSpellOnNpc(requestParameters: CastSpellOnNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SpellCast>;

    /**
     * 
     * @summary Cast a spell on your player character.
     * @param {string} gameId 
     * @param {CastSpellOnPlayer} castSpellOnPlayer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    castSpellOnPlayerRaw(requestParameters: CastSpellOnPlayerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SpellCast>>;

    /**
     * Cast a spell on your player character.
     */
    castSpellOnPlayer(requestParameters: CastSpellOnPlayerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SpellCast>;

    /**
     * 
     * @summary Get the current actions available for the game.
     * @param {string} gameId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    currentActionsRaw(requestParameters: CurrentActionsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<PerformAction>>>;

    /**
     * Get the current actions available for the game.
     */
    currentActions(requestParameters: CurrentActionsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<PerformAction>>;

    /**
     * 
     * @summary Exit the current room of the specified game through the specified exit.
     * @param {string} gameId 
     * @param {ExitRoom} exitRoom 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    exitRoomRaw(requestParameters: ExitRoomRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RoomExited>>;

    /**
     * Exit the current room of the specified game through the specified exit.
     */
    exitRoom(requestParameters: ExitRoomRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RoomExited>;

    /**
     * 
     * @summary Inspect a fixture to find out more information about them when looking at them next. After completing an inspect, look at the fixture to see new information.
     * @param {string} gameId 
     * @param {InspectFixture} inspectFixture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    inspectFixtureRaw(requestParameters: InspectFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FixtureInspected>>;

    /**
     * Inspect a fixture to find out more information about them when looking at them next. After completing an inspect, look at the fixture to see new information.
     */
    inspectFixture(requestParameters: InspectFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FixtureInspected>;

    /**
     * 
     * @summary Inspect an NPC to find out more information about them when looking at them next. After completing an inspect, look at the NPC to see new information.
     * @param {string} gameId 
     * @param {InspectNpc} inspectNpc 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    inspectNpcRaw(requestParameters: InspectNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NpcInspected>>;

    /**
     * Inspect an NPC to find out more information about them when looking at them next. After completing an inspect, look at the NPC to see new information.
     */
    inspectNpc(requestParameters: InspectNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NpcInspected>;

    /**
     * 
     * @summary Take a closer look at the current room.
     * @param {string} gameId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    lookAroundRoomRaw(requestParameters: LookAroundRoomRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Room>>;

    /**
     * Take a closer look at the current room.
     */
    lookAroundRoom(requestParameters: LookAroundRoomRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Room>;

    /**
     * 
     * @summary Look at a specific Fixture in the current room.
     * @param {string} gameId 
     * @param {LookAtFixture} lookAtFixture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    lookAtFixtureRaw(requestParameters: LookAtFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Fixture>>;

    /**
     * Look at a specific Fixture in the current room.
     */
    lookAtFixture(requestParameters: LookAtFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Fixture>;

    /**
     * 
     * @summary Look at a specific NPC in the current room.
     * @param {string} gameId 
     * @param {LookAtNpc} lookAtNpc 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    lookAtNpcRaw(requestParameters: LookAtNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NonPlayer>>;

    /**
     * Look at a specific NPC in the current room.
     */
    lookAtNpc(requestParameters: LookAtNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NonPlayer>;

    /**
     * 
     * @summary Loot some items from a fixture.
     * @param {string} gameId 
     * @param {LootFixture} lootFixture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    lootFixtureRaw(requestParameters: LootFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FixtureLooted>>;

    /**
     * Loot some items from a fixture.
     */
    lootFixture(requestParameters: LootFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FixtureLooted>;

    /**
     * 
     * @summary Loot some items from an NPC.
     * @param {string} gameId 
     * @param {LootNpc} lootNpc 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    lootNpcRaw(requestParameters: LootNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NpcLooted>>;

    /**
     * Loot some items from an NPC.
     */
    lootNpc(requestParameters: LootNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NpcLooted>;

    /**
     * 
     * @summary Use an item on your player character.
     * @param {string} gameId 
     * @param {MovePlayerItem} movePlayerItem 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    movePlayerItemRaw(requestParameters: MovePlayerItemRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ItemMoved>>;

    /**
     * Use an item on your player character.
     */
    movePlayerItem(requestParameters: MovePlayerItemRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ItemMoved>;

    /**
     * 
     * @summary Open a fixture.
     * @param {string} gameId 
     * @param {OpenFixture} openFixture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    openFixtureRaw(requestParameters: OpenFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FixtureOpened>>;

    /**
     * Open a fixture.
     */
    openFixture(requestParameters: OpenFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FixtureOpened>;

    /**
     * 
     * @summary Open hidden compartment of fixture.
     * @param {string} gameId 
     * @param {OpenFixtureHiddenCompartment} openFixtureHiddenCompartment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    openFixtureHiddenCompartmentRaw(requestParameters: OpenFixtureHiddenCompartmentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FixtureOpened>>;

    /**
     * Open hidden compartment of fixture.
     */
    openFixtureHiddenCompartment(requestParameters: OpenFixtureHiddenCompartmentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FixtureOpened>;

    /**
     * 
     * @summary Sell an item on your player.
     * @param {string} gameId 
     * @param {SellPlayerItem} sellPlayerItem 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    sellPlayerItemRaw(requestParameters: SellPlayerItemRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ItemSold>>;

    /**
     * Sell an item on your player.
     */
    sellPlayerItem(requestParameters: SellPlayerItemRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ItemSold>;

    /**
     * 
     * @summary Use an item on your player character.
     * @param {string} gameId 
     * @param {ThrowItemAtNpc} throwItemAtNpc 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    throwItemAtNpcRaw(requestParameters: ThrowItemAtNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ItemUsed>>;

    /**
     * Use an item on your player character.
     */
    throwItemAtNpc(requestParameters: ThrowItemAtNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ItemUsed>;

    /**
     * 
     * @summary Use an item on your player character.
     * @param {string} gameId 
     * @param {UseItemOnPlayer} useItemOnPlayer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameActionsApiInterface
     */
    useItemOnPlayerRaw(requestParameters: UseItemOnPlayerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ItemUsed>>;

    /**
     * Use an item on your player character.
     */
    useItemOnPlayer(requestParameters: UseItemOnPlayerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ItemUsed>;

}

/**
 * 
 */
export class GameActionsApi extends runtime.BaseAPI implements GameActionsApiInterface {

    /**
     * Attack a specific NPC inside the current room of the specified game.
     */
    async attackNpcRaw(requestParameters: AttackNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NpcAttacked>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling attackNpc.');
        }

        if (requestParameters.attackNpc === null || requestParameters.attackNpc === undefined) {
            throw new runtime.RequiredError('attackNpc','Required parameter requestParameters.attackNpc was null or undefined when calling attackNpc.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/attack_npc`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttackNpcToJSON(requestParameters.attackNpc),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NpcAttackedFromJSON(jsonValue));
    }

    /**
     * Attack a specific NPC inside the current room of the specified game.
     */
    async attackNpc(requestParameters: AttackNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NpcAttacked> {
        const response = await this.attackNpcRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cast a spell on your player character.
     */
    async castSpellOnNpcRaw(requestParameters: CastSpellOnNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SpellCast>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling castSpellOnNpc.');
        }

        if (requestParameters.castSpellOnNpc === null || requestParameters.castSpellOnNpc === undefined) {
            throw new runtime.RequiredError('castSpellOnNpc','Required parameter requestParameters.castSpellOnNpc was null or undefined when calling castSpellOnNpc.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/cast_spell_on_npc`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CastSpellOnNpcToJSON(requestParameters.castSpellOnNpc),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpellCastFromJSON(jsonValue));
    }

    /**
     * Cast a spell on your player character.
     */
    async castSpellOnNpc(requestParameters: CastSpellOnNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SpellCast> {
        const response = await this.castSpellOnNpcRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cast a spell on your player character.
     */
    async castSpellOnPlayerRaw(requestParameters: CastSpellOnPlayerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SpellCast>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling castSpellOnPlayer.');
        }

        if (requestParameters.castSpellOnPlayer === null || requestParameters.castSpellOnPlayer === undefined) {
            throw new runtime.RequiredError('castSpellOnPlayer','Required parameter requestParameters.castSpellOnPlayer was null or undefined when calling castSpellOnPlayer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/cast_spell_on_player`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CastSpellOnPlayerToJSON(requestParameters.castSpellOnPlayer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpellCastFromJSON(jsonValue));
    }

    /**
     * Cast a spell on your player character.
     */
    async castSpellOnPlayer(requestParameters: CastSpellOnPlayerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SpellCast> {
        const response = await this.castSpellOnPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current actions available for the game.
     */
    async currentActionsRaw(requestParameters: CurrentActionsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<PerformAction>>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling currentActions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/current_actions`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PerformActionFromJSON));
    }

    /**
     * Get the current actions available for the game.
     */
    async currentActions(requestParameters: CurrentActionsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<PerformAction>> {
        const response = await this.currentActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Exit the current room of the specified game through the specified exit.
     */
    async exitRoomRaw(requestParameters: ExitRoomRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RoomExited>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling exitRoom.');
        }

        if (requestParameters.exitRoom === null || requestParameters.exitRoom === undefined) {
            throw new runtime.RequiredError('exitRoom','Required parameter requestParameters.exitRoom was null or undefined when calling exitRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/exit_room`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExitRoomToJSON(requestParameters.exitRoom),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomExitedFromJSON(jsonValue));
    }

    /**
     * Exit the current room of the specified game through the specified exit.
     */
    async exitRoom(requestParameters: ExitRoomRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RoomExited> {
        const response = await this.exitRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Inspect a fixture to find out more information about them when looking at them next. After completing an inspect, look at the fixture to see new information.
     */
    async inspectFixtureRaw(requestParameters: InspectFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FixtureInspected>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling inspectFixture.');
        }

        if (requestParameters.inspectFixture === null || requestParameters.inspectFixture === undefined) {
            throw new runtime.RequiredError('inspectFixture','Required parameter requestParameters.inspectFixture was null or undefined when calling inspectFixture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/inspect_fixture`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InspectFixtureToJSON(requestParameters.inspectFixture),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureInspectedFromJSON(jsonValue));
    }

    /**
     * Inspect a fixture to find out more information about them when looking at them next. After completing an inspect, look at the fixture to see new information.
     */
    async inspectFixture(requestParameters: InspectFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FixtureInspected> {
        const response = await this.inspectFixtureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Inspect an NPC to find out more information about them when looking at them next. After completing an inspect, look at the NPC to see new information.
     */
    async inspectNpcRaw(requestParameters: InspectNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NpcInspected>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling inspectNpc.');
        }

        if (requestParameters.inspectNpc === null || requestParameters.inspectNpc === undefined) {
            throw new runtime.RequiredError('inspectNpc','Required parameter requestParameters.inspectNpc was null or undefined when calling inspectNpc.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/inspect_npc`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InspectNpcToJSON(requestParameters.inspectNpc),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NpcInspectedFromJSON(jsonValue));
    }

    /**
     * Inspect an NPC to find out more information about them when looking at them next. After completing an inspect, look at the NPC to see new information.
     */
    async inspectNpc(requestParameters: InspectNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NpcInspected> {
        const response = await this.inspectNpcRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Take a closer look at the current room.
     */
    async lookAroundRoomRaw(requestParameters: LookAroundRoomRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Room>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling lookAroundRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/look_around_room`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomFromJSON(jsonValue));
    }

    /**
     * Take a closer look at the current room.
     */
    async lookAroundRoom(requestParameters: LookAroundRoomRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Room> {
        const response = await this.lookAroundRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Look at a specific Fixture in the current room.
     */
    async lookAtFixtureRaw(requestParameters: LookAtFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Fixture>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling lookAtFixture.');
        }

        if (requestParameters.lookAtFixture === null || requestParameters.lookAtFixture === undefined) {
            throw new runtime.RequiredError('lookAtFixture','Required parameter requestParameters.lookAtFixture was null or undefined when calling lookAtFixture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/look_at_fixture`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LookAtFixtureToJSON(requestParameters.lookAtFixture),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureFromJSON(jsonValue));
    }

    /**
     * Look at a specific Fixture in the current room.
     */
    async lookAtFixture(requestParameters: LookAtFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Fixture> {
        const response = await this.lookAtFixtureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Look at a specific NPC in the current room.
     */
    async lookAtNpcRaw(requestParameters: LookAtNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NonPlayer>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling lookAtNpc.');
        }

        if (requestParameters.lookAtNpc === null || requestParameters.lookAtNpc === undefined) {
            throw new runtime.RequiredError('lookAtNpc','Required parameter requestParameters.lookAtNpc was null or undefined when calling lookAtNpc.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/look_at_npc`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LookAtNpcToJSON(requestParameters.lookAtNpc),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NonPlayerFromJSON(jsonValue));
    }

    /**
     * Look at a specific NPC in the current room.
     */
    async lookAtNpc(requestParameters: LookAtNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NonPlayer> {
        const response = await this.lookAtNpcRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Loot some items from a fixture.
     */
    async lootFixtureRaw(requestParameters: LootFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FixtureLooted>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling lootFixture.');
        }

        if (requestParameters.lootFixture === null || requestParameters.lootFixture === undefined) {
            throw new runtime.RequiredError('lootFixture','Required parameter requestParameters.lootFixture was null or undefined when calling lootFixture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/loot_fixture`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LootFixtureToJSON(requestParameters.lootFixture),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureLootedFromJSON(jsonValue));
    }

    /**
     * Loot some items from a fixture.
     */
    async lootFixture(requestParameters: LootFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FixtureLooted> {
        const response = await this.lootFixtureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Loot some items from an NPC.
     */
    async lootNpcRaw(requestParameters: LootNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NpcLooted>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling lootNpc.');
        }

        if (requestParameters.lootNpc === null || requestParameters.lootNpc === undefined) {
            throw new runtime.RequiredError('lootNpc','Required parameter requestParameters.lootNpc was null or undefined when calling lootNpc.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/loot_npc`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LootNpcToJSON(requestParameters.lootNpc),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NpcLootedFromJSON(jsonValue));
    }

    /**
     * Loot some items from an NPC.
     */
    async lootNpc(requestParameters: LootNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NpcLooted> {
        const response = await this.lootNpcRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use an item on your player character.
     */
    async movePlayerItemRaw(requestParameters: MovePlayerItemRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ItemMoved>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling movePlayerItem.');
        }

        if (requestParameters.movePlayerItem === null || requestParameters.movePlayerItem === undefined) {
            throw new runtime.RequiredError('movePlayerItem','Required parameter requestParameters.movePlayerItem was null or undefined when calling movePlayerItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/move_player_item`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MovePlayerItemToJSON(requestParameters.movePlayerItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemMovedFromJSON(jsonValue));
    }

    /**
     * Use an item on your player character.
     */
    async movePlayerItem(requestParameters: MovePlayerItemRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ItemMoved> {
        const response = await this.movePlayerItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Open a fixture.
     */
    async openFixtureRaw(requestParameters: OpenFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FixtureOpened>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling openFixture.');
        }

        if (requestParameters.openFixture === null || requestParameters.openFixture === undefined) {
            throw new runtime.RequiredError('openFixture','Required parameter requestParameters.openFixture was null or undefined when calling openFixture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/open_fixture`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenFixtureToJSON(requestParameters.openFixture),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureOpenedFromJSON(jsonValue));
    }

    /**
     * Open a fixture.
     */
    async openFixture(requestParameters: OpenFixtureRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FixtureOpened> {
        const response = await this.openFixtureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Open hidden compartment of fixture.
     */
    async openFixtureHiddenCompartmentRaw(requestParameters: OpenFixtureHiddenCompartmentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FixtureOpened>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling openFixtureHiddenCompartment.');
        }

        if (requestParameters.openFixtureHiddenCompartment === null || requestParameters.openFixtureHiddenCompartment === undefined) {
            throw new runtime.RequiredError('openFixtureHiddenCompartment','Required parameter requestParameters.openFixtureHiddenCompartment was null or undefined when calling openFixtureHiddenCompartment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/open_fixture_hidden_compartment`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenFixtureHiddenCompartmentToJSON(requestParameters.openFixtureHiddenCompartment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureOpenedFromJSON(jsonValue));
    }

    /**
     * Open hidden compartment of fixture.
     */
    async openFixtureHiddenCompartment(requestParameters: OpenFixtureHiddenCompartmentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FixtureOpened> {
        const response = await this.openFixtureHiddenCompartmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sell an item on your player.
     */
    async sellPlayerItemRaw(requestParameters: SellPlayerItemRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ItemSold>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling sellPlayerItem.');
        }

        if (requestParameters.sellPlayerItem === null || requestParameters.sellPlayerItem === undefined) {
            throw new runtime.RequiredError('sellPlayerItem','Required parameter requestParameters.sellPlayerItem was null or undefined when calling sellPlayerItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/sell_player_item`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SellPlayerItemToJSON(requestParameters.sellPlayerItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemSoldFromJSON(jsonValue));
    }

    /**
     * Sell an item on your player.
     */
    async sellPlayerItem(requestParameters: SellPlayerItemRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ItemSold> {
        const response = await this.sellPlayerItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use an item on your player character.
     */
    async throwItemAtNpcRaw(requestParameters: ThrowItemAtNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ItemUsed>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling throwItemAtNpc.');
        }

        if (requestParameters.throwItemAtNpc === null || requestParameters.throwItemAtNpc === undefined) {
            throw new runtime.RequiredError('throwItemAtNpc','Required parameter requestParameters.throwItemAtNpc was null or undefined when calling throwItemAtNpc.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/throw_item_at_npc`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThrowItemAtNpcToJSON(requestParameters.throwItemAtNpc),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemUsedFromJSON(jsonValue));
    }

    /**
     * Use an item on your player character.
     */
    async throwItemAtNpc(requestParameters: ThrowItemAtNpcRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ItemUsed> {
        const response = await this.throwItemAtNpcRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use an item on your player character.
     */
    async useItemOnPlayerRaw(requestParameters: UseItemOnPlayerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ItemUsed>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling useItemOnPlayer.');
        }

        if (requestParameters.useItemOnPlayer === null || requestParameters.useItemOnPlayer === undefined) {
            throw new runtime.RequiredError('useItemOnPlayer','Required parameter requestParameters.useItemOnPlayer was null or undefined when calling useItemOnPlayer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["UNDERWORLD-TOKEN"] = this.configuration.apiKey("UNDERWORLD-TOKEN"); // UnderworldApiKeyAuthorization authentication
        }

        const response = await this.request({
            path: `/game/{game_id}/use_item_on_player`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UseItemOnPlayerToJSON(requestParameters.useItemOnPlayer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemUsedFromJSON(jsonValue));
    }

    /**
     * Use an item on your player character.
     */
    async useItemOnPlayer(requestParameters: UseItemOnPlayerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ItemUsed> {
        const response = await this.useItemOnPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
