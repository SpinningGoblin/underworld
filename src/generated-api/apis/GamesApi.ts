/* tslint:disable */
/* eslint-disable */
/**
 * Underworld
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GeneratedGame,
    GeneratedGameFromJSON,
    GeneratedGameToJSON,
} from '../models';

export interface GenerateGameRequest {
    underworldUsername: string;
}

export interface GetGameIdsRequest {
    underworldUsername: string;
}

/**
 * GamesApi - interface
 * 
 * @export
 * @interface GamesApiInterface
 */
export interface GamesApiInterface {
    /**
     * # Example  POST `/my_username/games/generate` to generate and save a new game for my_username
     * @summary Generate and persist a new game.
     * @param {string} underworldUsername 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApiInterface
     */
    generateGameRaw(requestParameters: GenerateGameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GeneratedGame>>;

    /**
     * # Example  POST `/my_username/games/generate` to generate and save a new game for my_username
     * Generate and persist a new game.
     */
    generateGame(requestParameters: GenerateGameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GeneratedGame>;

    /**
     * # Example  Call `/my_username/games/ids` to retrieve all game ids for my_username
     * @summary Get IDs of all current games
     * @param {string} underworldUsername 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApiInterface
     */
    getGameIdsRaw(requestParameters: GetGameIdsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * # Example  Call `/my_username/games/ids` to retrieve all game ids for my_username
     * Get IDs of all current games
     */
    getGameIds(requestParameters: GetGameIdsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<string>>;

}

/**
 * 
 */
export class GamesApi extends runtime.BaseAPI implements GamesApiInterface {

    /**
     * # Example  POST `/my_username/games/generate` to generate and save a new game for my_username
     * Generate and persist a new game.
     */
    async generateGameRaw(requestParameters: GenerateGameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GeneratedGame>> {
        if (requestParameters.underworldUsername === null || requestParameters.underworldUsername === undefined) {
            throw new runtime.RequiredError('underworldUsername','Required parameter requestParameters.underworldUsername was null or undefined when calling generateGame.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.underworldUsername !== undefined && requestParameters.underworldUsername !== null) {
            headerParameters['underworld-username'] = String(requestParameters.underworldUsername);
        }

        const response = await this.request({
            path: `/games/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneratedGameFromJSON(jsonValue));
    }

    /**
     * # Example  POST `/my_username/games/generate` to generate and save a new game for my_username
     * Generate and persist a new game.
     */
    async generateGame(requestParameters: GenerateGameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GeneratedGame> {
        const response = await this.generateGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * # Example  Call `/my_username/games/ids` to retrieve all game ids for my_username
     * Get IDs of all current games
     */
    async getGameIdsRaw(requestParameters: GetGameIdsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.underworldUsername === null || requestParameters.underworldUsername === undefined) {
            throw new runtime.RequiredError('underworldUsername','Required parameter requestParameters.underworldUsername was null or undefined when calling getGameIds.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.underworldUsername !== undefined && requestParameters.underworldUsername !== null) {
            headerParameters['underworld-username'] = String(requestParameters.underworldUsername);
        }

        const response = await this.request({
            path: `/games/ids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * # Example  Call `/my_username/games/ids` to retrieve all game ids for my_username
     * Get IDs of all current games
     */
    async getGameIds(requestParameters: GetGameIdsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<string>> {
        const response = await this.getGameIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
