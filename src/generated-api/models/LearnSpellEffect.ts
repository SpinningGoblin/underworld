/* tslint:disable */
/* eslint-disable */
/**
 * Underworld
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Attack,
    AttackFromJSON,
    AttackFromJSONTyped,
    AttackToJSON,
} from './Attack';
import {
    Defense,
    DefenseFromJSON,
    DefenseFromJSONTyped,
    DefenseToJSON,
} from './Defense';
import {
    SpellName,
    SpellNameFromJSON,
    SpellNameFromJSONTyped,
    SpellNameToJSON,
} from './SpellName';

/**
 * 
 * @export
 * @interface LearnSpellEffect
 */
export interface LearnSpellEffect {
    /**
     * 
     * @type {SpellName}
     * @memberof LearnSpellEffect
     */
    spell_name: SpellName;
    /**
     * 
     * @type {Attack}
     * @memberof LearnSpellEffect
     */
    spell_attack?: Attack;
    /**
     * 
     * @type {Defense}
     * @memberof LearnSpellEffect
     */
    spell_defense?: Defense;
    /**
     * 
     * @type {number}
     * @memberof LearnSpellEffect
     */
    spell_uses: number;
}

export function LearnSpellEffectFromJSON(json: any): LearnSpellEffect {
    return LearnSpellEffectFromJSONTyped(json, false);
}

export function LearnSpellEffectFromJSONTyped(json: any, ignoreDiscriminator: boolean): LearnSpellEffect {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'spell_name': SpellNameFromJSON(json['spell_name']),
        'spell_attack': !exists(json, 'spell_attack') ? undefined : AttackFromJSON(json['spell_attack']),
        'spell_defense': !exists(json, 'spell_defense') ? undefined : DefenseFromJSON(json['spell_defense']),
        'spell_uses': json['spell_uses'],
    };
}

export function LearnSpellEffectToJSON(value?: LearnSpellEffect | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'spell_name': SpellNameToJSON(value.spell_name),
        'spell_attack': AttackToJSON(value.spell_attack),
        'spell_defense': DefenseToJSON(value.spell_defense),
        'spell_uses': value.spell_uses,
    };
}

