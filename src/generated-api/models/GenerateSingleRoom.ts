/* tslint:disable */
/* eslint-disable */
/**
 * Underworld
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FlavourText,
    FlavourTextFromJSON,
    FlavourTextFromJSONTyped,
    FlavourTextToJSON,
} from './FlavourText';
import {
    GenerateSingleRoomDimensions,
    GenerateSingleRoomDimensionsFromJSON,
    GenerateSingleRoomDimensionsFromJSONTyped,
    GenerateSingleRoomDimensionsToJSON,
} from './GenerateSingleRoomDimensions';
import {
    GenerateSingleRoomExitGenerationArgs,
    GenerateSingleRoomExitGenerationArgsFromJSON,
    GenerateSingleRoomExitGenerationArgsFromJSONTyped,
    GenerateSingleRoomExitGenerationArgsToJSON,
} from './GenerateSingleRoomExitGenerationArgs';
import {
    GenerateSingleRoomNumDescriptors,
    GenerateSingleRoomNumDescriptorsFromJSON,
    GenerateSingleRoomNumDescriptorsFromJSONTyped,
    GenerateSingleRoomNumDescriptorsToJSON,
} from './GenerateSingleRoomNumDescriptors';
import {
    RoomDescriptor,
    RoomDescriptorFromJSON,
    RoomDescriptorFromJSONTyped,
    RoomDescriptorToJSON,
} from './RoomDescriptor';
import {
    RoomType,
    RoomTypeFromJSON,
    RoomTypeFromJSONTyped,
    RoomTypeToJSON,
} from './RoomType';

/**
 * Args to tweak the room generation.
 * @export
 * @interface GenerateSingleRoom
 */
export interface GenerateSingleRoom {
    /**
     * 
     * @type {RoomType}
     * @memberof GenerateSingleRoom
     */
    room_type?: RoomType | null;
    /**
     * 
     * @type {GenerateSingleRoomNumDescriptors}
     * @memberof GenerateSingleRoom
     */
    num_descriptors?: GenerateSingleRoomNumDescriptors;
    /**
     * The possible descriptors that can be put onto the room.
     * @type {Array<RoomDescriptor>}
     * @memberof GenerateSingleRoom
     */
    possible_descriptors?: Array<RoomDescriptor>;
    /**
     * Set this to set the danger level for this room.
     * This will impact the health, and equipment on any NPCs and in fixtures.
     * @type {number}
     * @memberof GenerateSingleRoom
     */
    danger_level?: number;
    /**
     * 
     * @type {GenerateSingleRoomExitGenerationArgs}
     * @memberof GenerateSingleRoom
     */
    exit_generation_args?: GenerateSingleRoomExitGenerationArgs;
    /**
     * 
     * @type {GenerateSingleRoomDimensions}
     * @memberof GenerateSingleRoom
     */
    dimensions?: GenerateSingleRoomDimensions;
    /**
     * Set this if you'd like to set a name for the room.
     * @type {string}
     * @memberof GenerateSingleRoom
     */
    name?: string;
    /**
     * Set this to give options for flavour text for the room.
     * If not set, the default ones for the room type will be used.
     * @type {Array<FlavourText>}
     * @memberof GenerateSingleRoom
     */
    possible_flavour_texts?: Array<FlavourText>;
    /**
     * Set this to include or not include flavour text.
     * If not set, it will be included.
     * @type {boolean}
     * @memberof GenerateSingleRoom
     */
    include_flavour_text?: boolean;
}

export function GenerateSingleRoomFromJSON(json: any): GenerateSingleRoom {
    return GenerateSingleRoomFromJSONTyped(json, false);
}

export function GenerateSingleRoomFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenerateSingleRoom {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'room_type': !exists(json, 'room_type') ? undefined : RoomTypeFromJSON(json['room_type']),
        'num_descriptors': !exists(json, 'num_descriptors') ? undefined : GenerateSingleRoomNumDescriptorsFromJSON(json['num_descriptors']),
        'possible_descriptors': !exists(json, 'possible_descriptors') ? undefined : ((json['possible_descriptors'] as Array<any>).map(RoomDescriptorFromJSON)),
        'danger_level': !exists(json, 'danger_level') ? undefined : json['danger_level'],
        'exit_generation_args': !exists(json, 'exit_generation_args') ? undefined : GenerateSingleRoomExitGenerationArgsFromJSON(json['exit_generation_args']),
        'dimensions': !exists(json, 'dimensions') ? undefined : GenerateSingleRoomDimensionsFromJSON(json['dimensions']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'possible_flavour_texts': !exists(json, 'possible_flavour_texts') ? undefined : ((json['possible_flavour_texts'] as Array<any>).map(FlavourTextFromJSON)),
        'include_flavour_text': !exists(json, 'include_flavour_text') ? undefined : json['include_flavour_text'],
    };
}

export function GenerateSingleRoomToJSON(value?: GenerateSingleRoom | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'room_type': RoomTypeToJSON(value.room_type),
        'num_descriptors': GenerateSingleRoomNumDescriptorsToJSON(value.num_descriptors),
        'possible_descriptors': value.possible_descriptors === undefined ? undefined : ((value.possible_descriptors as Array<any>).map(RoomDescriptorToJSON)),
        'danger_level': value.danger_level,
        'exit_generation_args': GenerateSingleRoomExitGenerationArgsToJSON(value.exit_generation_args),
        'dimensions': GenerateSingleRoomDimensionsToJSON(value.dimensions),
        'name': value.name,
        'possible_flavour_texts': value.possible_flavour_texts === undefined ? undefined : ((value.possible_flavour_texts as Array<any>).map(FlavourTextToJSON)),
        'include_flavour_text': value.include_flavour_text,
    };
}

