/* tslint:disable */
/* eslint-disable */
/**
 * Underworld
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GameEvent,
    GameEventFromJSON,
    GameEventFromJSONTyped,
    GameEventToJSON,
} from './GameEvent';
import {
    PerformAction,
    PerformActionFromJSON,
    PerformActionFromJSONTyped,
    PerformActionToJSON,
} from './PerformAction';
import {
    PlayerCharacter,
    PlayerCharacterFromJSON,
    PlayerCharacterFromJSONTyped,
    PlayerCharacterToJSON,
} from './PlayerCharacter';
import {
    Room,
    RoomFromJSON,
    RoomFromJSONTyped,
    RoomToJSON,
} from './Room';

/**
 * Result of exiting the room.
 * @export
 * @interface RoomExited
 */
export interface RoomExited {
    /**
     * 
     * @type {Array<GameEvent>}
     * @memberof RoomExited
     */
    events: Array<GameEvent>;
    /**
     * 
     * @type {Array<PerformAction>}
     * @memberof RoomExited
     */
    actions: Array<PerformAction>;
    /**
     * 
     * @type {Room}
     * @memberof RoomExited
     */
    current_room: Room;
    /**
     * 
     * @type {PlayerCharacter}
     * @memberof RoomExited
     */
    current_player: PlayerCharacter;
}

export function RoomExitedFromJSON(json: any): RoomExited {
    return RoomExitedFromJSONTyped(json, false);
}

export function RoomExitedFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomExited {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'events': ((json['events'] as Array<any>).map(GameEventFromJSON)),
        'actions': ((json['actions'] as Array<any>).map(PerformActionFromJSON)),
        'current_room': RoomFromJSON(json['current_room']),
        'current_player': PlayerCharacterFromJSON(json['current_player']),
    };
}

export function RoomExitedToJSON(value?: RoomExited | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'events': ((value.events as Array<any>).map(GameEventToJSON)),
        'actions': ((value.actions as Array<any>).map(PerformActionToJSON)),
        'current_room': RoomToJSON(value.current_room),
        'current_player': PlayerCharacterToJSON(value.current_player),
    };
}

