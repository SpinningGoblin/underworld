/* tslint:disable */
/* eslint-disable */
/**
 * Underworld
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LifeModifier,
    LifeModifierFromJSON,
    LifeModifierFromJSONTyped,
    LifeModifierToJSON,
} from './LifeModifier';
import {
    RoomNpcGenerationArgsNumGroups,
    RoomNpcGenerationArgsNumGroupsFromJSON,
    RoomNpcGenerationArgsNumGroupsFromJSONTyped,
    RoomNpcGenerationArgsNumGroupsToJSON,
} from './RoomNpcGenerationArgsNumGroups';
import {
    Species,
    SpeciesFromJSON,
    SpeciesFromJSONTyped,
    SpeciesToJSON,
} from './Species';

/**
 * Args to modify the NPC generation inside of the room.
 * @export
 * @interface RoomNpcGenerationArgs
 */
export interface RoomNpcGenerationArgs {
    /**
     * 
     * @type {RoomNpcGenerationArgsNumGroups}
     * @memberof RoomNpcGenerationArgs
     */
    num_groups?: RoomNpcGenerationArgsNumGroups;
    /**
     * If you want to limit the species that can spawn, set them here.
     * Otherwise all species will be used.
     * @type {Array<Species>}
     * @memberof RoomNpcGenerationArgs
     */
    possible_species?: Array<Species>;
    /**
     * Limit the life modifiers that NPCs can be.
     * This does not guarantee that NPCs will spawn with these modifiers.
     * @type {Array<LifeModifier>}
     * @memberof RoomNpcGenerationArgs
     */
    possible_life_modifiers?: Array<LifeModifier>;
    /**
     * If you'd like NPCs to not spawn already killed, set this to false.
     * Defaults to true.
     * @type {boolean}
     * @memberof RoomNpcGenerationArgs
     */
    allow_npcs_to_spawn_dead?: boolean;
}

export function RoomNpcGenerationArgsFromJSON(json: any): RoomNpcGenerationArgs {
    return RoomNpcGenerationArgsFromJSONTyped(json, false);
}

export function RoomNpcGenerationArgsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomNpcGenerationArgs {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'num_groups': !exists(json, 'num_groups') ? undefined : RoomNpcGenerationArgsNumGroupsFromJSON(json['num_groups']),
        'possible_species': !exists(json, 'possible_species') ? undefined : ((json['possible_species'] as Array<any>).map(SpeciesFromJSON)),
        'possible_life_modifiers': !exists(json, 'possible_life_modifiers') ? undefined : ((json['possible_life_modifiers'] as Array<any>).map(LifeModifierFromJSON)),
        'allow_npcs_to_spawn_dead': !exists(json, 'allow_npcs_to_spawn_dead') ? undefined : json['allow_npcs_to_spawn_dead'],
    };
}

export function RoomNpcGenerationArgsToJSON(value?: RoomNpcGenerationArgs | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'num_groups': RoomNpcGenerationArgsNumGroupsToJSON(value.num_groups),
        'possible_species': value.possible_species === undefined ? undefined : ((value.possible_species as Array<any>).map(SpeciesToJSON)),
        'possible_life_modifiers': value.possible_life_modifiers === undefined ? undefined : ((value.possible_life_modifiers as Array<any>).map(LifeModifierToJSON)),
        'allow_npcs_to_spawn_dead': value.allow_npcs_to_spawn_dead,
    };
}

